# Prompt the user to select a mode (collect a new baseline or monitor with a saved baseline)
$baselineMode = Read-Host "Select a mode (1 = Collect new baseline, 2 = Monitor with saved baseline)"

# If the user selected "Collect new baseline", prompt for the path to monitor
if ($baselineMode -eq "1") {
    $monitorPath = Read-Host "Enter the path to monitor"
    # Prompt the user for the hash algorithm and check interval to use
    $hashAlgorithm = Read-Host "Enter the hash algorithm to use (e.g. SHA256)"
    $checkInterval = Read-Host "Enter the interval to check for changes (in seconds)"
    
    # Generate the initial hash value for all files in the monitored directory
    $baselineFiles = Get-ChildItem $monitorPath -Recurse | Where-Object { !$_.PSIsContainer } | ForEach-Object {
        $hash = Get-FileHash $_.FullName -Algorithm $hashAlgorithm
        [PSCustomObject]@{
            Path = $_.FullName
            Hash = $hash.Hash
        }
    }
    
    # Save the baseline to a file
    $baselineFiles | Export-Csv -Path "baseline.txt" -NoTypeInformation
}

# If the user selected "Monitor with saved baseline", load the baseline from the saved file
elseif ($baselineMode -eq "2") {
    $monitorPath = Read-Host "Enter the path to monitor"
    $hashAlgorithm = Read-Host "Enter the hash algorithm to use (e.g. SHA256)"
    $checkInterval = Read-Host "Enter the interval to check for changes (in seconds)"
    $baselineFiles = Import-Csv -Path "baseline.txt"
}

# Start an infinite loop to continuously check for changes
while ($true) {
    # Generate the current hash value for all files in the monitored directory
    $currentFiles = Get-ChildItem $monitorPath -Recurse | Where-Object { !$_.PSIsContainer } | ForEach-Object {
        $hash = Get-FileHash $_.FullName -Algorithm $hashAlgorithm
        [PSCustomObject]@{
            Path = $_.FullName
            Hash = $hash.Hash
        }
    }

    # Compare the baseline and current file lists to detect changes
    $addedFiles = Compare-Object $baselineFiles $currentFiles -Property Path | Where-Object { $_.SideIndicator -eq "=>" }
    $changedFiles = Compare-Object $baselineFiles $currentFiles -Property Path, Hash | Where-Object { $_.SideIndicator -eq "=>" }
    $deletedFiles = Compare-Object $currentFiles $baselineFiles -Property Path | Where-Object { $_.SideIndicator -eq "=>" }

    # If there are any added or changed files, output them to the console
    if ($addedFiles -or $changedFiles) {
        Write-Host "Changes detected at $(Get-Date):"
        if ($addedFiles) {
            Write-Host "Added files:"
            $addedFiles | ForEach-Object {
                Write-Host "`t$($_.Path)"
            }
        }
        if ($changedFiles) {
            Write-Host "Changed files:"
            $changedFiles | ForEach-Object {
                Write-Host "`t$($_.Path)"
            }
        }
    }

    # If any files were deleted, output them to the console
    if ($deletedFiles) {
        Write-Host "Deleted files:"
        $deleted
